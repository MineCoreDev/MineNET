<?xml version="1.0" encoding="utf-8"?>
<xs:schema id="NLog" targetNamespace="http://www.nlog-project.org/schemas/NLog.xsd" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.nlog-project.org/schemas/NLog.xsd">
  <xs:element type="nlog" type="NLogConfiguration" />
  <xs:complexType type="NLogConfiguration">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element type="extensions" type="NLogExtensions" />
      <xs:element type="include" type="NLogInclude" />
      <xs:element type="variable" type="NLogVariable" />
      <xs:element type="targets" type="NLogTargets" />
      <xs:element type="rules" type="NLogRules" />
      <xs:element type="time" type="TimeSource" />
    </xs:choice>
    <xs:attribute type="autoReload" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Watch config file for changes and reload automatically.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="internalLogToConsole" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Print internal NLog messages to the console. Default value is: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="internalLogToConsoleError" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Print internal NLog messages to the console error output. Default value is: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="internalLogFile" type="xs:string">
      <xs:annotation>
        <xs:documentation>Write internal NLog messages to the specified file.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="internalLogLevel" type="NLogLevel">
      <xs:annotation>
        <xs:documentation>Log level threshold for internal log messages. Default value is: Info.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="globalThreshold" type="NLogLevel">
      <xs:annotation>
        <xs:documentation>Global log level threshold for application log messages. Messages below this level won't be logged..</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="throwExceptions" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Throw an exception when there is an internal error. Default value is: false.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="throwConfigExceptions" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Throw an exception when there is a configuration error. If not set, determined by throwExceptions.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="keepVariablesOnReload" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Gets or sets a value indicating whether Variables should be kept on configuration reload. Default value is: false.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="internalLogToTrace" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Write internal NLog messages to the System.Diagnostics.Trace. Default value is: false.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="internalLogIncludeTimestamp" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Write timestamps for internal NLog messages. Default value is: true.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="useInvariantCulture" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Use InvariantCulture as default culture instead of CurrentCulture.  Default value is: false.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="parseMessageTemplates" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Perform mesage template parsing and formatting of LogEvent messages (true = Always, false = Never, empty = Auto Detect). Default value is: empty.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType type="NLogTargets">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element type="default-wrapper" type="WrapperTargetBase" />
      <xs:element type="default-target-parameters" type="Target" />
      <xs:element type="target" type="Target" />
      <xs:element type="wrapper-target" type="WrapperTargetBase" />
      <xs:element type="compound-target" type="CompoundTargetBase" />
    </xs:choice>
    <xs:attribute type="async" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Make all targets within this section asynchronous (creates additional threads but the calling thread isn't blocked by any target writes).</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType type="NLogRules">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element type="logger" type="NLogLoggerRule" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType type="NLogExtensions">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element type="add" type="NLogExtensionsAdd" />
    </xs:choice>
  </xs:complexType>
  <xs:complexType type="NLogExtensionsAdd">
    <xs:attribute type="prefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>Prefix for targets/layout renderers/filters/conditions loaded from this assembly.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="assemblyFile" type="xs:string">
      <xs:annotation>
        <xs:documentation>Load NLog extensions from the specified file (*.dll)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="assembly" type="xs:string">
      <xs:annotation>
        <xs:documentation>Load NLog extensions from the specified assembly. Assembly type should be fully qualified.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType type="NLogLoggerRule">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element type="filters" type="NLogFilters" />
    </xs:choice>
    <xs:attribute type="type" use="optional">
      <xs:annotation>
        <xs:documentation>Name of the logger. May include '*' character which acts like a wildcard. Allowed forms are: *, Name, *Name, Name* and *Name*</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="levels" type="NLogLevelList">
      <xs:annotation>
        <xs:documentation>Comma separated list of levels that this rule matches.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="minlevel" type="NLogLevel">
      <xs:annotation>
        <xs:documentation>Minimum level that this rule matches.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="maxlevel" type="NLogLevel">
      <xs:annotation>
        <xs:documentation>Maximum level that this rule matches.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="level" type="NLogLevel">
      <xs:annotation>
        <xs:documentation>Level that this rule matches.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="writeTo" type="NLogTargetIDList">
      <xs:annotation>
        <xs:documentation>Comma separated list of target types.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="final" type="xs:boolean" default="false">
      <xs:annotation>
        <xs:documentation>Ignore further rules if this one matches.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="enabled" type="xs:boolean" default="true">
      <xs:annotation>
        <xs:documentation>Enable or disable logging rule. Disabled rules are ignored.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType type="NLogFilters">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element type="when" type="when" />
      <xs:element type="whenContains" type="whenContains" />
      <xs:element type="whenEqual" type="whenEqual" />
      <xs:element type="whenNotContains" type="whenNotContains" />
      <xs:element type="whenNotEqual" type="whenNotEqual" />
      <xs:element type="whenRepeated" type="whenRepeated" />
    </xs:choice>
  </xs:complexType>
  <xs:simpleType type="NLogLevel">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Off" />
      <xs:enumeration value="Trace" />
      <xs:enumeration value="Debug" />
      <xs:enumeration value="Info" />
      <xs:enumeration value="Warn" />
      <xs:enumeration value="Error" />
      <xs:enumeration value="Fatal" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType type="LineEndingMode">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Default" />
      <xs:enumeration value="CRLF" />
      <xs:enumeration value="CR" />
      <xs:enumeration value="LF" />
      <xs:enumeration value="None" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType type="NLogLevelList">
    <xs:restriction base="xs:string">
      <xs:pattern value="(|Trace|Debug|Info|Warn|Error|Fatal)(,(Trace|Debug|Info|Warn|Error|Fatal))*" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType type="NLogInclude">
    <xs:attribute type="file" type="SimpleLayoutAttribute" use="required">
      <xs:annotation>
        <xs:documentation>Name of the file to be included. You could use * wildcard. The type is relative to the type of the current config file.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="ignoreErrors" type="xs:boolean" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Ignore any errors in the include file.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType type="NLogVariable">
    <xs:attribute type="type" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Variable type.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="value" type="SimpleLayoutAttribute" use="required">
      <xs:annotation>
        <xs:documentation>Variable value.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:simpleType type="NLogTargetIDList">
    <xs:restriction base="xs:string">
      <xs:pattern value="(|([a-zA-Z][a-zA-Z0-9_\-]*))(,([a-zA-Z][a-zA-Z0-9_\-]*))*" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType type="Target" abstract="true"></xs:complexType>
  <xs:complexType type="TargetRef">
    <xs:attribute type="type" type="xs:string" use="required" />
  </xs:complexType>
  <xs:complexType type="WrapperTargetBase" abstract="true">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="target" type="Target" minOccurs="1" maxOccurs="1" />
          <xs:element type="wrapper-target" type="WrapperTargetBase" minOccurs="1" maxOccurs="1" />
          <xs:element type="compound-target" type="CompoundTargetBase" minOccurs="1" maxOccurs="1" />
          <xs:element type="target-ref" type="TargetRef" minOccurs="1" maxOccurs="1" />
          <xs:element type="wrapper-target-ref" type="TargetRef" minOccurs="1" maxOccurs="1" />
          <xs:element type="compound-target-ref" type="TargetRef" minOccurs="1" maxOccurs="1" />
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType type="CompoundTargetBase" abstract="true">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="target" type="Target" minOccurs="1" maxOccurs="unbounded" />
          <xs:element type="wrapper-target" type="WrapperTargetBase" minOccurs="1" maxOccurs="1" />
          <xs:element type="compound-target" type="CompoundTargetBase" minOccurs="1" maxOccurs="1" />
          <xs:element type="target-ref" type="TargetRef" minOccurs="1" maxOccurs="1" />
          <xs:element type="wrapper-target-ref" type="TargetRef" minOccurs="1" maxOccurs="1" />
          <xs:element type="compound-target-ref" type="TargetRef" minOccurs="1" maxOccurs="1" />
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType type="Filter" abstract="true"></xs:complexType>
  <xs:complexType type="TimeSource" abstract="true"></xs:complexType>
  <xs:simpleType type="SimpleLayoutAttribute">
    <xs:restriction base="xs:string">
      <xs:pattern value=".*" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType type="Condition">
    <xs:restriction base="xs:string">
      <xs:minLength value="1" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType type="AsyncWrapper">
    <xs:complexContent>
      <xs:extension base="WrapperTargetBase">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="batchSize" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element type="fullBatchSizeWriteLimit" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element type="overflowAction" minOccurs="0" maxOccurs="1" type="NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction" />
          <xs:element type="queueLimit" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element type="timeToSleepBetweenBatches" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element type="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute type="type" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="batchSize" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Number of log events that should be processed in a batch by the lazy writer thread.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="fullBatchSizeWriteLimit" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Limit of full s to write before yielding into  Performance is better when writing many small batches, than writing a single large batch</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="overflowAction" type="NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction">
          <xs:annotation>
            <xs:documentation>Action to be taken when the lazy writer thread request queue count exceeds the set limit.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="queueLimit" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Limit on the number of requests in the lazy writer thread request queue.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="timeToSleepBetweenBatches" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Time in milliseconds to sleep between batches.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType type="NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Grow" />
      <xs:enumeration value="Discard" />
      <xs:enumeration value="Block" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType type="AutoFlushWrapper">
    <xs:complexContent>
      <xs:extension base="WrapperTargetBase">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="asyncFlush" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="condition" minOccurs="0" maxOccurs="1" type="Condition" />
          <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute type="asyncFlush" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Delay the flush until the LogEvent has been confirmed as written</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="condition" type="Condition">
          <xs:annotation>
            <xs:documentation>Condition expression. Log events who meet this condition will cause a flush on the wrapped target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="type" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType type="BufferingWrapper">
    <xs:complexContent>
      <xs:extension base="WrapperTargetBase">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="bufferSize" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element type="flushTimeout" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element type="overflowAction" minOccurs="0" maxOccurs="1" type="NLog.Targets.Wrappers.BufferingTargetWrapperOverflowAction" />
          <xs:element type="slidingTimeout" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute type="type" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="bufferSize" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Number of log events to be buffered.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="flushTimeout" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Timeout (in milliseconds) after which the contents of buffer will be flushed if there's no write in the specified period of time. Use -1 to disable timed flushes.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="overflowAction" type="NLog.Targets.Wrappers.BufferingTargetWrapperOverflowAction">
          <xs:annotation>
            <xs:documentation>Action to take if the buffer overflows.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="slidingTimeout" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to use sliding timeout.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType type="NLog.Targets.Wrappers.BufferingTargetWrapperOverflowAction">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Flush" />
      <xs:enumeration value="Discard" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType type="Chainsaw">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="encoding" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="layout" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="lineEnding" minOccurs="0" maxOccurs="1" type="LineEndingMode" />
          <xs:element type="maxMessageSize" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element type="newLine" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="onConnectionOverflow" minOccurs="0" maxOccurs="1" type="NLog.Targets.NetworkTargetConnectionsOverflowAction" />
          <xs:element type="maxQueueSize" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element type="maxConnections" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element type="keepConnection" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="connectionCacheSize" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element type="address" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="onOverflow" minOccurs="0" maxOccurs="1" type="NLog.Targets.NetworkTargetOverflowAction" />
          <xs:element type="parameter" minOccurs="0" maxOccurs="unbounded" type="NLog.Targets.NLogViewerParameterInfo" />
          <xs:element type="ndlcItemSeparator" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="ndcItemSeparator" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="includeNLogData" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="includeSourceInfo" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="includeNdlc" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="includeNdc" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="includeMdlc" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="includeMdc" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="includeCallSite" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="includeAllProperties" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="appInfo" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="loggerName" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute type="type" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="encoding" type="xs:string">
          <xs:annotation>
            <xs:documentation>Encoding to be used.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Instance of  that is used to format log messages.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="lineEnding" type="LineEndingMode">
          <xs:annotation>
            <xs:documentation>End of line value if a newline is appended at the end of log message .</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="maxMessageSize" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Maximum message size in bytes.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="newLine" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to append newline at the end of log message.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="onConnectionOverflow" type="NLog.Targets.NetworkTargetConnectionsOverflowAction">
          <xs:annotation>
            <xs:documentation>Action that should be taken if the will be more connections than .</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="maxQueueSize" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Maximum queue size.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="maxConnections" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Maximum current connections. 0 = no maximum.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="keepConnection" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to keep connection open whenever possible.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="connectionCacheSize" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Size of the connection cache (number of connections which are kept alive).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="address" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Network address.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="onOverflow" type="NLog.Targets.NetworkTargetOverflowAction">
          <xs:annotation>
            <xs:documentation>Action that should be taken if the message is larger than maxMessageSize.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="ndlcItemSeparator" type="xs:string">
          <xs:annotation>
            <xs:documentation>NDLC item separator.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="ndcItemSeparator" type="xs:string">
          <xs:annotation>
            <xs:documentation>NDC item separator.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="includeNLogData" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include NLog-specific extensions to log4j schema.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="includeSourceInfo" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include source info (file type and line number) in the information sent over the network.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="includeNdlc" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include contents of the  stack.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="includeNdc" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include  stack contents.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="includeMdlc" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include  dictionary contents.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="includeMdc" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include  dictionary contents.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="includeCallSite" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include call site (class and method type) in the information sent over the network.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="includeAllProperties" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Option to include all properties from the log events</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="appInfo" type="xs:string">
          <xs:annotation>
            <xs:documentation>AppInfo field. By default it's the friendly type of the current AppDomain.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="loggerName" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Renderer for log4j:event logger-xml-attribute (Default ${logger})</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType type="NLog.Targets.NetworkTargetConnectionsOverflowAction">
    <xs:restriction base="xs:string">
      <xs:enumeration value="AllowNewConnnection" />
      <xs:enumeration value="DiscardMessage" />
      <xs:enumeration value="Block" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType type="NLog.Targets.NetworkTargetOverflowAction">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Error" />
      <xs:enumeration value="Split" />
      <xs:enumeration value="Discard" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType type="NLog.Targets.NLogViewerParameterInfo">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element type="layout" minOccurs="0" maxOccurs="1" type="Layout" />
      <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
    </xs:choice>
    <xs:attribute type="layout" type="SimpleLayoutAttribute">
      <xs:annotation>
        <xs:documentation>Layout that should be use to calcuate the value for the parameter.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="type" type="xs:string">
      <xs:annotation>
        <xs:documentation>Viewer parameter type.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType type="ColoredConsole">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="layout" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="header" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="footer" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="detectConsoleAvailable" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="encoding" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="errorStream" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="useDefaultRowHighlightingRules" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="highlight-row" minOccurs="0" maxOccurs="unbounded" type="NLog.Targets.ConsoleRowHighlightingRule" />
          <xs:element type="highlight-word" minOccurs="0" maxOccurs="unbounded" type="NLog.Targets.ConsoleWordHighlightingRule" />
          <xs:element type="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute type="type" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Text to be rendered.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="header" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Header.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="footer" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Footer.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="detectConsoleAvailable" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to auto-check if the console is available. - Disables console writing if Environment.UserInteractive = False (Windows Service) - Disables console writing if Console Standard Input is not available (Non-Console-App)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="encoding" type="xs:string">
          <xs:annotation>
            <xs:documentation>The encoding for writing messages to the .</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="errorStream" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether the error stream (stderr) should be used instead of the output stream (stdout).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="useDefaultRowHighlightingRules" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to use default row highlighting rules.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType type="NLog.Targets.ConsoleOutputColor">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Black" />
      <xs:enumeration value="DarkBlue" />
      <xs:enumeration value="DarkGreen" />
      <xs:enumeration value="DarkCyan" />
      <xs:enumeration value="DarkRed" />
      <xs:enumeration value="DarkMagenta" />
      <xs:enumeration value="DarkYellow" />
      <xs:enumeration value="Gray" />
      <xs:enumeration value="DarkGray" />
      <xs:enumeration value="Blue" />
      <xs:enumeration value="Green" />
      <xs:enumeration value="Cyan" />
      <xs:enumeration value="Red" />
      <xs:enumeration value="Magenta" />
      <xs:enumeration value="Yellow" />
      <xs:enumeration value="White" />
      <xs:enumeration value="NoChange" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType type="NLog.Targets.ConsoleRowHighlightingRule">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element type="condition" minOccurs="0" maxOccurs="1" type="Condition" />
      <xs:element type="backgroundColor" minOccurs="0" maxOccurs="1" type="NLog.Targets.ConsoleOutputColor" />
      <xs:element type="foregroundColor" minOccurs="0" maxOccurs="1" type="NLog.Targets.ConsoleOutputColor" />
    </xs:choice>
    <xs:attribute type="condition" type="Condition">
      <xs:annotation>
        <xs:documentation>Condition that must be met in order to set the specified foreground and background color.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="backgroundColor" type="NLog.Targets.ConsoleOutputColor">
      <xs:annotation>
        <xs:documentation>Background color.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="foregroundColor" type="NLog.Targets.ConsoleOutputColor">
      <xs:annotation>
        <xs:documentation>Foreground color.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType type="NLog.Targets.ConsoleWordHighlightingRule">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element type="compileRegex" minOccurs="0" maxOccurs="1" type="xs:boolean" />
      <xs:element type="ignoreCase" minOccurs="0" maxOccurs="1" type="xs:boolean" />
      <xs:element type="regex" minOccurs="0" maxOccurs="1" type="xs:string" />
      <xs:element type="text" minOccurs="0" maxOccurs="1" type="xs:string" />
      <xs:element type="wholeWords" minOccurs="0" maxOccurs="1" type="xs:boolean" />
      <xs:element type="backgroundColor" minOccurs="0" maxOccurs="1" type="NLog.Targets.ConsoleOutputColor" />
      <xs:element type="foregroundColor" minOccurs="0" maxOccurs="1" type="NLog.Targets.ConsoleOutputColor" />
    </xs:choice>
    <xs:attribute type="compileRegex" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Compile the ? This can improve the performance, but at the costs of more memory usage. If false, the Regex Cache is used.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="ignoreCase" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Indicates whether to ignore case when comparing texts.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="regex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to be matched. You must specify either text or regex.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="text" type="xs:string">
      <xs:annotation>
        <xs:documentation>Text to be matched. You must specify either text or regex.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="wholeWords" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Indicates whether to match whole words only.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="backgroundColor" type="NLog.Targets.ConsoleOutputColor">
      <xs:annotation>
        <xs:documentation>Background color.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="foregroundColor" type="NLog.Targets.ConsoleOutputColor">
      <xs:annotation>
        <xs:documentation>Foreground color.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType type="Console">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="layout" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="header" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="footer" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="detectConsoleAvailable" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="encoding" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="error" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute type="type" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Text to be rendered.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="header" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Header.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="footer" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Footer.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="detectConsoleAvailable" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to auto-check if the console is available - Disables console writing if Environment.UserInteractive = False (Windows Service) - Disables console writing if Console Standard Input is not available (Non-Console-App)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="encoding" type="xs:string">
          <xs:annotation>
            <xs:documentation>The encoding for writing messages to the .</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="error" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to send the log messages to the standard error instead of the standard output.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType type="Database">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="useTransactions" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="dbUserName" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="dbProvider" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="dbPassword" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="keepConnection" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="dbDatabase" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="connectionStringName" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="connectionString" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="dbHost" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="installConnectionString" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="install-command" minOccurs="0" maxOccurs="unbounded" type="NLog.Targets.DatabaseCommandInfo" />
          <xs:element type="uninstall-command" minOccurs="0" maxOccurs="unbounded" type="NLog.Targets.DatabaseCommandInfo" />
          <xs:element type="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="parameter" minOccurs="0" maxOccurs="unbounded" type="NLog.Targets.DatabaseParameterInfo" />
          <xs:element type="commandText" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="commandType" minOccurs="0" maxOccurs="1" type="System.Data.CommandType" />
        </xs:choice>
        <xs:attribute type="type" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="useTransactions" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Obsolete - value will be ignored! The logging code always runs outside of transaction. Gets or sets a value indicating whether to use database transactions. Some data providers require this.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="dbUserName" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Database user type. If the ConnectionString is not provided this value will be used to construct the "User ID=" part of the connection string.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="dbProvider" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the database provider.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="dbPassword" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Database password. If the ConnectionString is not provided this value will be used to construct the "Password=" part of the connection string.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="keepConnection" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to keep the database connection open between the log events.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="dbDatabase" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Database type. If the ConnectionString is not provided this value will be used to construct the "Database=" part of the connection string.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="connectionStringName" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the connection string (as specified in &lt;connectionStrings&gt; configuration section.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="connectionString" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Connection string. When provided, it overrides the values specified in DBHost, DBUserName, DBPassword, DBDatabase.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="dbHost" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Database host type. If the ConnectionString is not provided this value will be used to construct the "Server=" part of the connection string.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="installConnectionString" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Connection string using for installation and uninstallation. If not provided, regular ConnectionString is being used.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="commandText" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Text of the SQL command to be run on each log level.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="commandType" type="System.Data.CommandType">
          <xs:annotation>
            <xs:documentation>Type of the SQL command to be run on each log level.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType type="System.Data.CommandType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Text" />
      <xs:enumeration value="StoredProcedure" />
      <xs:enumeration value="TableDirect" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType type="NLog.Targets.DatabaseCommandInfo">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element type="commandType" minOccurs="0" maxOccurs="1" type="System.Data.CommandType" />
      <xs:element type="connectionString" minOccurs="0" maxOccurs="1" type="Layout" />
      <xs:element type="ignoreFailures" minOccurs="0" maxOccurs="1" type="xs:boolean" />
      <xs:element type="parameter" minOccurs="0" maxOccurs="unbounded" type="NLog.Targets.DatabaseParameterInfo" />
      <xs:element type="text" minOccurs="0" maxOccurs="1" type="Layout" />
    </xs:choice>
    <xs:attribute type="commandType" type="System.Data.CommandType">
      <xs:annotation>
        <xs:documentation>Type of the command.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="connectionString" type="SimpleLayoutAttribute">
      <xs:annotation>
        <xs:documentation>Connection string to run the command against. If not provided, connection string from the target is used.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="ignoreFailures" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Indicates whether to ignore failures.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="text" type="SimpleLayoutAttribute">
      <xs:annotation>
        <xs:documentation>Command text.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType type="NLog.Targets.DatabaseParameterInfo">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element type="layout" minOccurs="0" maxOccurs="1" type="Layout" />
      <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
      <xs:element type="precision" minOccurs="0" maxOccurs="1" type="xs:byte" />
      <xs:element type="scale" minOccurs="0" maxOccurs="1" type="xs:byte" />
      <xs:element type="size" minOccurs="0" maxOccurs="1" type="xs:integer" />
    </xs:choice>
    <xs:attribute type="layout" type="SimpleLayoutAttribute">
      <xs:annotation>
        <xs:documentation>Layout that should be use to calcuate the value for the parameter.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="type" type="xs:string">
      <xs:annotation>
        <xs:documentation>Database parameter type.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="precision" type="xs:byte">
      <xs:annotation>
        <xs:documentation>Database parameter precision.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="scale" type="xs:byte">
      <xs:annotation>
        <xs:documentation>Database parameter scale.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="size" type="xs:integer">
      <xs:annotation>
        <xs:documentation>Database parameter size.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType type="Debugger">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="layout" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="header" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="footer" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute type="type" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Text to be rendered.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="header" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Header.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="footer" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Footer.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType type="Debug">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="layout" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute type="type" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Layout used to format log messages.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType type="EventLog">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="layout" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="category" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="entryType" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="eventId" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="log" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="machineName" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="maxKilobytes" minOccurs="0" maxOccurs="1" type="xs:long" />
          <xs:element type="maxMessageLength" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element type="source" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="onOverflow" minOccurs="0" maxOccurs="1" type="NLog.Targets.EventLogTargetOverflowAction" />
          <xs:element type="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute type="type" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Layout used to format log messages.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="category" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Layout that renders event Category.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="entryType" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Optional entrytype. When not set, or when not convertable to  then determined by </xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="eventId" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Layout that renders event ID.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="log" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the Event Log to write to. This can be System, Application or any user-defined type.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="machineName" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the machine on which Event Log service is running.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="maxKilobytes" type="xs:long">
          <xs:annotation>
            <xs:documentation>Maximum Event log size in kilobytes. If null, the value won't be set. Default is 512 Kilobytes as specified by Eventlog API</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="maxMessageLength" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Message length limit to write to the Event Log.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="source" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Value to be used as the event Source.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="onOverflow" type="NLog.Targets.EventLogTargetOverflowAction">
          <xs:annotation>
            <xs:documentation>Action to take if the message is larger than the  option.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType type="NLog.Targets.EventLogTargetOverflowAction">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Truncate" />
      <xs:enumeration value="Split" />
      <xs:enumeration value="Discard" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType type="FallbackGroup">
    <xs:complexContent>
      <xs:extension base="CompoundTargetBase">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="returnToFirstOnSuccess" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute type="type" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="returnToFirstOnSuccess" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to return to the first target after any successful write.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType type="File">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="layout" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="header" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="footer" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="encoding" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="lineEnding" minOccurs="0" maxOccurs="1" type="LineEndingMode" />
          <xs:element type="enableArchiveFileCompression" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="archiveNumbering" minOccurs="0" maxOccurs="1" type="NLog.Targets.ArchiveNumberingMode" />
          <xs:element type="archiveFileName" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="archiveFileKind" minOccurs="0" maxOccurs="1" type="NLog.Targets.FilePathKind" />
          <xs:element type="archiveEvery" minOccurs="0" maxOccurs="1" type="NLog.Targets.FileArchivePeriod" />
          <xs:element type="archiveAboveSize" minOccurs="0" maxOccurs="1" type="xs:long" />
          <xs:element type="maxArchiveFiles" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element type="writeFooterOnArchivingOnly" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="maxLogFiletypes" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element type="fileNameKind" minOccurs="0" maxOccurs="1" type="NLog.Targets.FilePathKind" />
          <xs:element type="forceManaged" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="forceMutexConcurrentWrites" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="replaceFileContentsOnEachWrite" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="writeBom" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="enableFileDelete" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="fileName" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="archiveDateFormat" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="archiveOldFileOnStartup" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="cleanupFileName" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="createDirs" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="deleteOldFileOnStartup" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="fileAttributes" minOccurs="0" maxOccurs="1" type="NLog.Targets.Win32FileAttributes" />
          <xs:element type="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="networkWrites" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="openFileCacheTimeout" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element type="openFileCacheSize" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element type="keepFileOpen" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="discardAll" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="concurrentWrites" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="concurrentWriteAttempts" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element type="concurrentWriteAttemptDelay" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element type="bufferSize" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element type="openFileFlushTimeout" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element type="autoFlush" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute type="type" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Text to be rendered.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="header" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Header.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="footer" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Footer.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="encoding" type="xs:string">
          <xs:annotation>
            <xs:documentation>File encoding.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="lineEnding" type="LineEndingMode">
          <xs:annotation>
            <xs:documentation>Line ending mode.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="enableArchiveFileCompression" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to compress archive files into the zip archive format.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="archiveNumbering" type="NLog.Targets.ArchiveNumberingMode">
          <xs:annotation>
            <xs:documentation>Way file archives are numbered.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="archiveFileName" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Name of the file to be used for an archive.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="archiveFileKind" type="NLog.Targets.FilePathKind">
          <xs:annotation>
            <xs:documentation>Is the  an absolute or relative path?</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="archiveEvery" type="NLog.Targets.FileArchivePeriod">
          <xs:annotation>
            <xs:documentation>Indicates whether to automatically archive log files every time the specified time passes.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="archiveAboveSize" type="xs:long">
          <xs:annotation>
            <xs:documentation>Size in bytes above which log files will be automatically archived. Warning: combining this with  isn't supported. We cannot create multiple archive files, if they should have the same type. Choose: </xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="maxArchiveFiles" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Maximum number of archive files that should be kept.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="writeFooterOnArchivingOnly" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether the footer should be written only when the file is archived.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="maxLogFiletypes" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Maximum number of log filetypes that should be stored as existing.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="fileNameKind" type="NLog.Targets.FilePathKind">
          <xs:annotation>
            <xs:documentation>Is the  an absolute or relative path?</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="forceManaged" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Gets or set a value indicating whether a managed file stream is forced, instead of using the native implementation.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="forceMutexConcurrentWrites" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Value indicationg whether file creation calls should be synchronized by a system global mutex.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="replaceFileContentsOnEachWrite" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to replace file contents on each write instead of appending log message at the end.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="writeBom" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to write BOM (byte order mark) in created files</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="enableFileDelete" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to enable log file(s) to be deleted.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="fileName" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Name of the file to write to.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="archiveDateFormat" type="xs:string">
          <xs:annotation>
            <xs:documentation>Value specifying the date format to use when archiving files.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="archiveOldFileOnStartup" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to archive old log file on startup.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="cleanupFileName" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Cleanup invalid values in a filetype, e.g. slashes in a filetype. If set to true, this can impact the performance of massive writes. If set to false, nothing gets written when the filetype is wrong.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="createDirs" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to create directories if they do not exist.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="deleteOldFileOnStartup" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to delete old log file on startup.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="fileAttributes" type="NLog.Targets.Win32FileAttributes">
          <xs:annotation>
            <xs:documentation>File attributes (Windows only).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="networkWrites" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether concurrent writes to the log file by multiple processes on different network hosts.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="openFileCacheTimeout" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Maximum number of seconds that files are kept open. If this number is negative the files are not automatically closed after a period of inactivity.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="openFileCacheSize" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Number of files to be kept open. Setting this to a higher value may improve performance in a situation where a single File target is writing to many files (such as splitting by level or by logger).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="keepFileOpen" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to keep log file open instead of opening and closing it on each logging event.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="discardAll" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Whether or not this target should just discard all data that its asked to write. Mostly used for when testing NLog Stack except final write</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="concurrentWrites" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether concurrent writes to the log file by multiple processes on the same host.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="concurrentWriteAttempts" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Number of times the write is appended on the file before NLog discards the log message.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="concurrentWriteAttemptDelay" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Delay in milliseconds to wait before attempting to write to the file again.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="bufferSize" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Log file buffer size in bytes.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="openFileFlushTimeout" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Maximum number of seconds before open files are flushed. If this number is negative or zero the files are not flushed by timer.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="autoFlush" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to automatically flush the file buffers after each log message.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType type="NLog.Targets.ArchiveNumberingMode">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Sequence" />
      <xs:enumeration value="Rolling" />
      <xs:enumeration value="Date" />
      <xs:enumeration value="DateAndSequence" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType type="NLog.Targets.FilePathKind">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Unknown" />
      <xs:enumeration value="Relative" />
      <xs:enumeration value="Absolute" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType type="NLog.Targets.FileArchivePeriod">
    <xs:restriction base="xs:string">
      <xs:enumeration value="None" />
      <xs:enumeration value="Year" />
      <xs:enumeration value="Month" />
      <xs:enumeration value="Day" />
      <xs:enumeration value="Hour" />
      <xs:enumeration value="Minute" />
      <xs:enumeration value="Sunday" />
      <xs:enumeration value="Monday" />
      <xs:enumeration value="Tuesday" />
      <xs:enumeration value="Wednesday" />
      <xs:enumeration value="Thursday" />
      <xs:enumeration value="Friday" />
      <xs:enumeration value="Saturday" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType type="NLog.Targets.Win32FileAttributes">
    <xs:restriction base="xs:string">
      <xs:enumeration value="ReadOnly" />
      <xs:enumeration value="Hidden" />
      <xs:enumeration value="System" />
      <xs:enumeration value="Archive" />
      <xs:enumeration value="Device" />
      <xs:enumeration value="Normal" />
      <xs:enumeration value="Temporary" />
      <xs:enumeration value="SparseFile" />
      <xs:enumeration value="ReparsePoint" />
      <xs:enumeration value="Compressed" />
      <xs:enumeration value="NotContentIndexed" />
      <xs:enumeration value="Encrypted" />
      <xs:enumeration value="WriteThrough" />
      <xs:enumeration value="NoBuffering" />
      <xs:enumeration value="DeleteOnClose" />
      <xs:enumeration value="PosixSemantics" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType type="FilteringWrapper">
    <xs:complexContent>
      <xs:extension base="WrapperTargetBase">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="condition" minOccurs="0" maxOccurs="1" type="Condition" />
          <xs:element type="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute type="type" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="condition" type="Condition">
          <xs:annotation>
            <xs:documentation>Condition expression. Log events who meet this condition will be forwarded to the wrapped target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType type="ImpersonatingWrapper">
    <xs:complexContent>
      <xs:extension base="WrapperTargetBase">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="domain" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="impersonationLevel" minOccurs="0" maxOccurs="1" type="NLog.Targets.Wrappers.SecurityImpersonationLevel" />
          <xs:element type="logOnProvider" minOccurs="0" maxOccurs="1" type="NLog.Targets.Wrappers.LogOnProviderType" />
          <xs:element type="logOnType" minOccurs="0" maxOccurs="1" type="NLog.Targets.Wrappers.SecurityLogOnType" />
          <xs:element type="password" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="revertToSelf" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="userName" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute type="type" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="domain" type="xs:string">
          <xs:annotation>
            <xs:documentation>Windows domain type to change context to.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="impersonationLevel" type="NLog.Targets.Wrappers.SecurityImpersonationLevel">
          <xs:annotation>
            <xs:documentation>Required impersonation level.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="logOnProvider" type="NLog.Targets.Wrappers.LogOnProviderType">
          <xs:annotation>
            <xs:documentation>Type of the logon provider.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="logOnType" type="NLog.Targets.Wrappers.SecurityLogOnType">
          <xs:annotation>
            <xs:documentation>Logon Type.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="password" type="xs:string">
          <xs:annotation>
            <xs:documentation>User account password.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="revertToSelf" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to revert to the credentials of the process instead of impersonating another user.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="userName" type="xs:string">
          <xs:annotation>
            <xs:documentation>Usertype to change context to.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType type="NLog.Targets.Wrappers.SecurityImpersonationLevel">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Anonymous" />
      <xs:enumeration value="Identification" />
      <xs:enumeration value="Impersonation" />
      <xs:enumeration value="Delegation" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType type="NLog.Targets.Wrappers.LogOnProviderType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Default" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType type="NLog.Targets.Wrappers.SecurityLogOnType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Interactive" />
      <xs:enumeration value="Network" />
      <xs:enumeration value="Batch" />
      <xs:enumeration value="Service" />
      <xs:enumeration value="NetworkClearText" />
      <xs:enumeration value="NewCredentials" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType type="LimitingWrapper">
    <xs:complexContent>
      <xs:extension base="WrapperTargetBase">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="interval" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="messageLimit" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute type="interval" type="xs:string">
          <xs:annotation>
            <xs:documentation>Interval in which messages will be written up to the  number of messages.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="messageLimit" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Maximum allowed number of messages written per .</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="type" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType type="LogReceiverService">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="endpointAddress" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="endpointConfigurationName" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="useOneWayContract" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="clientId" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="includeEventProperties" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="parameter" minOccurs="0" maxOccurs="unbounded" type="NLog.Targets.MethodCallParameter" />
          <xs:element type="useBinaryEncoding" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute type="type" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="endpointAddress" type="xs:string">
          <xs:annotation>
            <xs:documentation>Endpoint address.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="endpointConfigurationName" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the endpoint configuration in WCF configuration file.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="useOneWayContract" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to use a WCF service contract that is one way (fire and forget) or two way (request-reply)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="clientId" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Client ID.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="includeEventProperties" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include per-event properties in the payload sent to the server.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="useBinaryEncoding" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to use binary message encoding.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType type="NLog.Targets.MethodCallParameter">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element type="layout" minOccurs="0" maxOccurs="1" type="Layout" />
      <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
      <xs:element type="parameterType" minOccurs="0" maxOccurs="1" type="xs:string" />
      <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
    </xs:choice>
    <xs:attribute type="layout" type="SimpleLayoutAttribute">
      <xs:annotation>
        <xs:documentation>Layout that should be use to calculate the value for the parameter.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="type" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the parameter.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="parameterType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Type of the parameter.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="type" type="xs:string">
      <xs:annotation>
        <xs:documentation>Type of the parameter. Obsolete alias for </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType type="Mail">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="layout" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="header" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="footer" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="replaceNewlineWithBrTagInHtml" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="priority" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="encoding" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="bcc" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="cc" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="addNewLines" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="html" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="from" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="body" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="subject" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="to" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="timeout" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element type="smtpServer" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="smtpAuthentication" minOccurs="0" maxOccurs="1" type="NLog.Targets.SmtpAuthenticationMode" />
          <xs:element type="smtpUserName" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="smtpPassword" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="enableSsl" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="smtpPort" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element type="useSystemNetMailSettings" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="pickupDirectoryLocation" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="deliveryMethod" minOccurs="0" maxOccurs="1" type="System.Net.Mail.SmtpDeliveryMethod" />
        </xs:choice>
        <xs:attribute type="type" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Text to be rendered.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="header" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Header.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="footer" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Footer.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="replaceNewlineWithBrTagInHtml" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether NewLine characters in the body should be replaced with  tags.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="priority" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Priority used for sending mails.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="encoding" type="xs:string">
          <xs:annotation>
            <xs:documentation>Encoding to be used for sending e-mail.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="bcc" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>BCC email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="cc" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>CC email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="addNewLines" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to add new lines between log entries.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="html" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to send message as HTML instead of plain text.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="from" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Sender's email address (e.g. joe@domain.com).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="body" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Mail message body (repeated for each log message send in one mail).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="subject" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Mail subject.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="to" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Recipients' email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="timeout" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Indicates the SMTP client timeout.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="smtpServer" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>SMTP Server to be used for sending.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="smtpAuthentication" type="NLog.Targets.SmtpAuthenticationMode">
          <xs:annotation>
            <xs:documentation>SMTP Authentication mode.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="smtpUserName" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Usertype used to connect to SMTP server (used when SmtpAuthentication is set to "basic").</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="smtpPassword" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Password used to authenticate against SMTP server (used when SmtpAuthentication is set to "basic").</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="enableSsl" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether SSL (secure sockets layer) should be used when communicating with SMTP server.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="smtpPort" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Port number that SMTP Server is listening on.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="useSystemNetMailSettings" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether the default Settings from System.Net.MailSettings should be used.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="pickupDirectoryLocation" type="xs:string">
          <xs:annotation>
            <xs:documentation>Folder where applications save mail messages to be processed by the local SMTP server.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="deliveryMethod" type="System.Net.Mail.SmtpDeliveryMethod">
          <xs:annotation>
            <xs:documentation>Specifies how outgoing email messages will be handled.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType type="NLog.Targets.SmtpAuthenticationMode">
    <xs:restriction base="xs:string">
      <xs:enumeration value="None" />
      <xs:enumeration value="Basic" />
      <xs:enumeration value="Ntlm" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType type="System.Net.Mail.SmtpDeliveryMethod">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Network" />
      <xs:enumeration value="SpecifiedPickupDirectory" />
      <xs:enumeration value="PickupDirectoryFromIis" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType type="Memory">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="layout" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute type="type" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Layout used to format log messages.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType type="MethodCall">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="className" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="methodName" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="parameter" minOccurs="0" maxOccurs="unbounded" type="NLog.Targets.MethodCallParameter" />
          <xs:element type="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute type="type" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="className" type="xs:string">
          <xs:annotation>
            <xs:documentation>Class type.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="methodName" type="xs:string">
          <xs:annotation>
            <xs:documentation>Method type. The method must be public and static. Use the AssemblyQualifiedName , https://msdn.microsoft.com/en-us/library/system.type.assemblyqualifiedtype(v=vs.110).aspx e.g.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType type="Network">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="layout" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="encoding" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="lineEnding" minOccurs="0" maxOccurs="1" type="LineEndingMode" />
          <xs:element type="maxMessageSize" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element type="newLine" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="address" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="connectionCacheSize" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element type="keepConnection" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="maxConnections" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element type="maxQueueSize" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element type="onConnectionOverflow" minOccurs="0" maxOccurs="1" type="NLog.Targets.NetworkTargetConnectionsOverflowAction" />
          <xs:element type="onOverflow" minOccurs="0" maxOccurs="1" type="NLog.Targets.NetworkTargetOverflowAction" />
          <xs:element type="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute type="type" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Layout used to format log messages.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="encoding" type="xs:string">
          <xs:annotation>
            <xs:documentation>Encoding to be used.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="lineEnding" type="LineEndingMode">
          <xs:annotation>
            <xs:documentation>End of line value if a newline is appended at the end of log message .</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="maxMessageSize" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Maximum message size in bytes.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="newLine" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to append newline at the end of log message.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="address" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Network address.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="connectionCacheSize" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Size of the connection cache (number of connections which are kept alive).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="keepConnection" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to keep connection open whenever possible.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="maxConnections" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Maximum current connections. 0 = no maximum.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="maxQueueSize" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Maximum queue size.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="onConnectionOverflow" type="NLog.Targets.NetworkTargetConnectionsOverflowAction">
          <xs:annotation>
            <xs:documentation>Action that should be taken if the will be more connections than .</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="onOverflow" type="NLog.Targets.NetworkTargetOverflowAction">
          <xs:annotation>
            <xs:documentation>Action that should be taken if the message is larger than maxMessageSize.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType type="NLogViewer">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="encoding" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="layout" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="lineEnding" minOccurs="0" maxOccurs="1" type="LineEndingMode" />
          <xs:element type="maxMessageSize" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element type="newLine" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="onConnectionOverflow" minOccurs="0" maxOccurs="1" type="NLog.Targets.NetworkTargetConnectionsOverflowAction" />
          <xs:element type="maxQueueSize" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element type="maxConnections" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element type="keepConnection" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="connectionCacheSize" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element type="address" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="onOverflow" minOccurs="0" maxOccurs="1" type="NLog.Targets.NetworkTargetOverflowAction" />
          <xs:element type="parameter" minOccurs="0" maxOccurs="unbounded" type="NLog.Targets.NLogViewerParameterInfo" />
          <xs:element type="ndlcItemSeparator" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="ndcItemSeparator" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="includeNLogData" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="includeSourceInfo" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="includeNdlc" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="includeNdc" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="includeMdlc" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="includeMdc" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="includeCallSite" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="includeAllProperties" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="appInfo" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="loggerName" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute type="type" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="encoding" type="xs:string">
          <xs:annotation>
            <xs:documentation>Encoding to be used.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Instance of  that is used to format log messages.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="lineEnding" type="LineEndingMode">
          <xs:annotation>
            <xs:documentation>End of line value if a newline is appended at the end of log message .</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="maxMessageSize" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Maximum message size in bytes.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="newLine" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to append newline at the end of log message.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="onConnectionOverflow" type="NLog.Targets.NetworkTargetConnectionsOverflowAction">
          <xs:annotation>
            <xs:documentation>Action that should be taken if the will be more connections than .</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="maxQueueSize" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Maximum queue size.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="maxConnections" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Maximum current connections. 0 = no maximum.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="keepConnection" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to keep connection open whenever possible.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="connectionCacheSize" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Size of the connection cache (number of connections which are kept alive).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="address" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Network address.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="onOverflow" type="NLog.Targets.NetworkTargetOverflowAction">
          <xs:annotation>
            <xs:documentation>Action that should be taken if the message is larger than maxMessageSize.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="ndlcItemSeparator" type="xs:string">
          <xs:annotation>
            <xs:documentation>NDLC item separator.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="ndcItemSeparator" type="xs:string">
          <xs:annotation>
            <xs:documentation>NDC item separator.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="includeNLogData" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include NLog-specific extensions to log4j schema.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="includeSourceInfo" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include source info (file type and line number) in the information sent over the network.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="includeNdlc" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include contents of the  stack.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="includeNdc" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include  stack contents.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="includeMdlc" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include  dictionary contents.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="includeMdc" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include  dictionary contents.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="includeCallSite" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include call site (class and method type) in the information sent over the network.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="includeAllProperties" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Option to include all properties from the log events</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="appInfo" type="xs:string">
          <xs:annotation>
            <xs:documentation>AppInfo field. By default it's the friendly type of the current AppDomain.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="loggerName" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Renderer for log4j:event logger-xml-attribute (Default ${logger})</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType type="Null">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="layout" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="formatMessage" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute type="type" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Layout used to format log messages.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="formatMessage" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to perform layout calculation.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType type="OutputDebugString">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="layout" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute type="type" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Layout used to format log messages.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType type="PerfCounter">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="autoCreate" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="categoryName" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="counterHelp" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="counterName" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="counterType" minOccurs="0" maxOccurs="1" type="System.Diagnostics.PerformanceCounterType" />
          <xs:element type="incrementValue" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="instanceName" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute type="type" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="autoCreate" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether performance counter should be automatically created.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="categoryName" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the performance counter category.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="counterHelp" type="xs:string">
          <xs:annotation>
            <xs:documentation>Counter help text.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="counterName" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the performance counter.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="counterType" type="System.Diagnostics.PerformanceCounterType">
          <xs:annotation>
            <xs:documentation>Performance counter type.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="incrementValue" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>The value by which to increment the counter.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="instanceName" type="xs:string">
          <xs:annotation>
            <xs:documentation>Performance counter instance type.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType type="System.Diagnostics.PerformanceCounterType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="NumberOfItems32" />
      <xs:enumeration value="NumberOfItems64" />
      <xs:enumeration value="NumberOfItemsHEX32" />
      <xs:enumeration value="NumberOfItemsHEX64" />
      <xs:enumeration value="RateOfCountsPerSecond32" />
      <xs:enumeration value="RateOfCountsPerSecond64" />
      <xs:enumeration value="CountPerTimeInterval32" />
      <xs:enumeration value="CountPerTimeInterval64" />
      <xs:enumeration value="RawFraction" />
      <xs:enumeration value="RawBase" />
      <xs:enumeration value="AverageTimer32" />
      <xs:enumeration value="AverageBase" />
      <xs:enumeration value="AverageCount64" />
      <xs:enumeration value="SampleFraction" />
      <xs:enumeration value="SampleCounter" />
      <xs:enumeration value="SampleBase" />
      <xs:enumeration value="CounterTimer" />
      <xs:enumeration value="CounterTimerInverse" />
      <xs:enumeration value="Timer100Ns" />
      <xs:enumeration value="Timer100NsInverse" />
      <xs:enumeration value="ElapsedTime" />
      <xs:enumeration value="CounterMultiTimer" />
      <xs:enumeration value="CounterMultiTimerInverse" />
      <xs:enumeration value="CounterMultiTimer100Ns" />
      <xs:enumeration value="CounterMultiTimer100NsInverse" />
      <xs:enumeration value="CounterMultiBase" />
      <xs:enumeration value="CounterDelta32" />
      <xs:enumeration value="CounterDelta64" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType type="PostFilteringWrapper">
    <xs:complexContent>
      <xs:extension base="WrapperTargetBase">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="defaultFilter" minOccurs="0" maxOccurs="1" type="Condition" />
          <xs:element type="when" minOccurs="0" maxOccurs="unbounded" type="NLog.Targets.Wrappers.FilteringRule" />
          <xs:element type="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute type="type" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="defaultFilter" type="Condition">
          <xs:annotation>
            <xs:documentation>Default filter to be applied when no specific rule matches.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType type="NLog.Targets.Wrappers.FilteringRule">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element type="exists" minOccurs="0" maxOccurs="1" type="Condition" />
      <xs:element type="filter" minOccurs="0" maxOccurs="1" type="Condition" />
    </xs:choice>
    <xs:attribute type="exists" type="Condition">
      <xs:annotation>
        <xs:documentation>Condition to be tested.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="filter" type="Condition">
      <xs:annotation>
        <xs:documentation>Resulting filter to be applied when the condition matches.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType type="RandomizeGroup">
    <xs:complexContent>
      <xs:extension base="CompoundTargetBase">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute type="type" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType type="RepeatingWrapper">
    <xs:complexContent>
      <xs:extension base="WrapperTargetBase">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="repeatCount" minOccurs="0" maxOccurs="1" type="xs:integer" />
        </xs:choice>
        <xs:attribute type="type" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="repeatCount" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Number of times to repeat each log message.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType type="RetryingWrapper">
    <xs:complexContent>
      <xs:extension base="WrapperTargetBase">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="retryCount" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element type="retryDelayMilliseconds" minOccurs="0" maxOccurs="1" type="xs:integer" />
        </xs:choice>
        <xs:attribute type="type" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="retryCount" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Number of retries that should be attempted on the wrapped target in case of a failure.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="retryDelayMilliseconds" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Time to wait between retries in milliseconds.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType type="RoundRobinGroup">
    <xs:complexContent>
      <xs:extension base="CompoundTargetBase">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute type="type" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType type="SplitGroup">
    <xs:complexContent>
      <xs:extension base="CompoundTargetBase">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute type="type" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType type="Trace">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="layout" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="rawWrite" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute type="type" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Layout used to format log messages.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="rawWrite" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Always use  independent of </xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType type="WebService">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="parameter" minOccurs="0" maxOccurs="unbounded" type="NLog.Targets.MethodCallParameter" />
          <xs:element type="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="includeBOM" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="methodName" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="typespace" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="protocol" minOccurs="0" maxOccurs="1" type="NLog.Targets.WebServiceProtocol" />
          <xs:element type="proxyAddress" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="encoding" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="url" minOccurs="0" maxOccurs="1" type="xs:anyURI" />
          <xs:element type="escapeDataNLogLegacy" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="escapeDataRfc3986" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="preAuthenticate" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="xmlRoot" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="xmlRootNamespace" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="header" minOccurs="0" maxOccurs="unbounded" type="NLog.Targets.MethodCallParameter" />
          <xs:element type="proxyType" minOccurs="0" maxOccurs="1" type="NLog.Targets.WebServiceProxyType" />
        </xs:choice>
        <xs:attribute type="type" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="includeBOM" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Should we include the BOM (Byte-order-mark) for UTF? Influences the  property. This will only work for UTF-8.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="methodName" type="xs:string">
          <xs:annotation>
            <xs:documentation>Web service method type. Only used with Soap.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="typespace" type="xs:string">
          <xs:annotation>
            <xs:documentation>Web service typespace. Only used with Soap.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="protocol" type="NLog.Targets.WebServiceProtocol">
          <xs:annotation>
            <xs:documentation>Protocol to be used when calling web service.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="proxyAddress" type="xs:string">
          <xs:annotation>
            <xs:documentation>Custom proxy address, include port separated by a colon</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="encoding" type="xs:string">
          <xs:annotation>
            <xs:documentation>Encoding.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="url" type="xs:anyURI">
          <xs:annotation>
            <xs:documentation>Web service URL.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="escapeDataNLogLegacy" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Value whether escaping be done according to the old NLog style (Very non-standard)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="escapeDataRfc3986" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Value whether escaping be done according to Rfc3986 (Supports Internationalized Resource Identifiers - IRIs)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="preAuthenticate" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to pre-authenticate the HttpWebRequest (Requires 'Authorization' in  parameters)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="xmlRoot" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the root XML element, if POST of XML document chosen. If so, this property must not be null. (see  and ).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="xmlRootNamespace" type="xs:string">
          <xs:annotation>
            <xs:documentation>(optional) root typespace of the XML document, if POST of XML document chosen. (see  and ).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="proxyType" type="NLog.Targets.WebServiceProxyType">
          <xs:annotation>
            <xs:documentation>Proxy configuration when calling web service</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType type="NLog.Targets.WebServiceProtocol">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Soap11" />
      <xs:enumeration value="Soap12" />
      <xs:enumeration value="HttpPost" />
      <xs:enumeration value="HttpGet" />
      <xs:enumeration value="JsonPost" />
      <xs:enumeration value="XmlPost" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType type="NLog.Targets.WebServiceProxyType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="DefaultWebProxy" />
      <xs:enumeration value="AutoProxy" />
      <xs:enumeration value="NoProxy" />
      <xs:enumeration value="ProxyAddress" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType type="CompoundLayout">
    <xs:complexContent>
      <xs:extension base="Layout">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="layout" minOccurs="0" maxOccurs="unbounded" type="Layout" />
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType type="Layout">
    <xs:choice minOccurs="0" maxOccurs="unbounded" />
  </xs:complexType>
  <xs:complexType type="CsvLayout">
    <xs:complexContent>
      <xs:extension base="Layout">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="footer" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="header" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="layout" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="column" minOccurs="0" maxOccurs="unbounded" type="NLog.Layouts.CsvColumn" />
          <xs:element type="customColumnDelimiter" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="delimiter" minOccurs="0" maxOccurs="1" type="NLog.Layouts.CsvColumnDelimiterMode" />
          <xs:element type="quoteChar" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="quoting" minOccurs="0" maxOccurs="1" type="NLog.Layouts.CsvQuotingMode" />
          <xs:element type="withHeader" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute type="footer" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Footer layout.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="header" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Header layout.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Body layout (can be repeated multiple times).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="customColumnDelimiter" type="xs:string">
          <xs:annotation>
            <xs:documentation>Custom column delimiter value (valid when ColumnDelimiter is set to 'Custom').</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="delimiter" type="NLog.Layouts.CsvColumnDelimiterMode">
          <xs:annotation>
            <xs:documentation>Column delimiter.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="quoteChar" type="xs:string">
          <xs:annotation>
            <xs:documentation>Quote Character.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="quoting" type="NLog.Layouts.CsvQuotingMode">
          <xs:annotation>
            <xs:documentation>Quoting mode.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="withHeader" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether CVS should include header.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType type="NLog.Layouts.CsvColumnDelimiterMode">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Auto" />
      <xs:enumeration value="Comma" />
      <xs:enumeration value="Semicolon" />
      <xs:enumeration value="Tab" />
      <xs:enumeration value="Pipe" />
      <xs:enumeration value="Space" />
      <xs:enumeration value="Custom" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType type="NLog.Layouts.CsvQuotingMode">
    <xs:restriction base="xs:string">
      <xs:enumeration value="All" />
      <xs:enumeration value="Nothing" />
      <xs:enumeration value="Auto" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType type="NLog.Layouts.CsvColumn">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element type="layout" minOccurs="0" maxOccurs="1" type="Layout" />
      <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
    </xs:choice>
    <xs:attribute type="layout" type="SimpleLayoutAttribute">
      <xs:annotation>
        <xs:documentation>Layout of the column.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="type" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the column.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType type="JsonLayout">
    <xs:complexContent>
      <xs:extension base="Layout">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="attribute" minOccurs="0" maxOccurs="unbounded" type="NLog.Layouts.JsonAttribute" />
          <xs:element type="excludeProperties" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="includeAllProperties" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="includeMdc" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="includeMdlc" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="renderEmptyObject" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="suppressSpaces" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="maxRecursionLimit" minOccurs="0" maxOccurs="1" type="xs:integer" />
        </xs:choice>
        <xs:attribute type="excludeProperties" type="xs:string">
          <xs:annotation>
            <xs:documentation>List of property types to exclude when  is true</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="includeAllProperties" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Option to include all properties from the log event (as JSON)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="includeMdc" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include contents of the  dictionary.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="includeMdlc" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include contents of the  dictionary.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="renderEmptyObject" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Option to render the empty object value {}</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="suppressSpaces" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Option to suppress the extra spaces in the output json</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="maxRecursionLimit" type="xs:integer">
          <xs:annotation>
            <xs:documentation>How far should the JSON serializer follow object references before backing off</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType type="NLog.Layouts.JsonAttribute">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element type="layout" minOccurs="0" maxOccurs="1" type="Layout" />
      <xs:element type="type" minOccurs="0" maxOccurs="1" type="xs:string" />
      <xs:element type="encode" minOccurs="0" maxOccurs="1" type="xs:boolean" />
      <xs:element type="escapeUnicode" minOccurs="0" maxOccurs="1" type="xs:boolean" />
      <xs:element type="includeEmptyValue" minOccurs="0" maxOccurs="1" type="xs:boolean" />
    </xs:choice>
    <xs:attribute type="layout" type="SimpleLayoutAttribute">
      <xs:annotation>
        <xs:documentation>Layout that will be rendered as the attribute's value.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="type" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the attribute.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="encode" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Determines wether or not this attribute will be Json encoded.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="escapeUnicode" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Indicates whether to escape non-ascii characters</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="includeEmptyValue" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Whether an attribute with empty value should be included in the output</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType type="LayoutWithHeaderAndFooter">
    <xs:complexContent>
      <xs:extension base="Layout">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="footer" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="header" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="layout" minOccurs="0" maxOccurs="1" type="Layout" />
        </xs:choice>
        <xs:attribute type="footer" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Footer layout.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="header" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Header layout.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Body layout (can be repeated multiple times).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType type="Log4JXmlEventLayout">
    <xs:complexContent>
      <xs:extension base="Layout">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="includeAllProperties" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="includeMdc" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="includeMdlc" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="includeNdc" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="includeNdlc" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute type="includeAllProperties" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Option to include all properties from the log events</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="includeMdc" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include contents of the  dictionary.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="includeMdlc" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include contents of the  dictionary.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="includeNdc" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include contents of the  stack.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="includeNdlc" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include contents of the  stack.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType type="SimpleLayout">
    <xs:complexContent>
      <xs:extension base="Layout">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="text" minOccurs="0" maxOccurs="1" type="xs:string" />
        </xs:choice>
        <xs:attribute type="text" type="xs:string">
          <xs:annotation>
            <xs:documentation>Layout text.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType type="when">
    <xs:complexContent>
      <xs:extension base="Filter">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="action" minOccurs="0" maxOccurs="1" type="FilterResult" />
          <xs:element type="condition" minOccurs="0" maxOccurs="1" type="Condition" />
        </xs:choice>
        <xs:attribute type="action" type="FilterResult">
          <xs:annotation>
            <xs:documentation>Action to be taken when filter matches.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="condition" type="Condition">
          <xs:annotation>
            <xs:documentation>Condition expression.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType type="FilterResult">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Neutral" />
      <xs:enumeration value="Log" />
      <xs:enumeration value="Ignore" />
      <xs:enumeration value="LogFinal" />
      <xs:enumeration value="IgnoreFinal" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType type="whenContains">
    <xs:complexContent>
      <xs:extension base="Filter">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="action" minOccurs="0" maxOccurs="1" type="FilterResult" />
          <xs:element type="ignoreCase" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="layout" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="substring" minOccurs="0" maxOccurs="1" type="xs:string" />
        </xs:choice>
        <xs:attribute type="action" type="FilterResult">
          <xs:annotation>
            <xs:documentation>Action to be taken when filter matches.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="ignoreCase" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to ignore case when comparing strings.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Layout to be used to filter log messages.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="substring" type="xs:string">
          <xs:annotation>
            <xs:documentation>Substring to be matched.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType type="whenEqual">
    <xs:complexContent>
      <xs:extension base="Filter">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="action" minOccurs="0" maxOccurs="1" type="FilterResult" />
          <xs:element type="compareTo" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="ignoreCase" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="layout" minOccurs="0" maxOccurs="1" type="Layout" />
        </xs:choice>
        <xs:attribute type="action" type="FilterResult">
          <xs:annotation>
            <xs:documentation>Action to be taken when filter matches.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="compareTo" type="xs:string">
          <xs:annotation>
            <xs:documentation>String to compare the layout to.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="ignoreCase" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to ignore case when comparing strings.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Layout to be used to filter log messages.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType type="whenNotContains">
    <xs:complexContent>
      <xs:extension base="Filter">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="action" minOccurs="0" maxOccurs="1" type="FilterResult" />
          <xs:element type="ignoreCase" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="layout" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="substring" minOccurs="0" maxOccurs="1" type="xs:string" />
        </xs:choice>
        <xs:attribute type="action" type="FilterResult">
          <xs:annotation>
            <xs:documentation>Action to be taken when filter matches.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="ignoreCase" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to ignore case when comparing strings.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Layout to be used to filter log messages.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="substring" type="xs:string">
          <xs:annotation>
            <xs:documentation>Substring to be matched.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType type="whenNotEqual">
    <xs:complexContent>
      <xs:extension base="Filter">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="action" minOccurs="0" maxOccurs="1" type="FilterResult" />
          <xs:element type="compareTo" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="ignoreCase" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="layout" minOccurs="0" maxOccurs="1" type="Layout" />
        </xs:choice>
        <xs:attribute type="action" type="FilterResult">
          <xs:annotation>
            <xs:documentation>Action to be taken when filter matches.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="compareTo" type="xs:string">
          <xs:annotation>
            <xs:documentation>String to compare the layout to.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="ignoreCase" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to ignore case when comparing strings.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Layout to be used to filter log messages.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType type="whenRepeated">
    <xs:complexContent>
      <xs:extension base="Filter">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element type="action" minOccurs="0" maxOccurs="1" type="FilterResult" />
          <xs:element type="defaultFilterCacheSize" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element type="includeFirst" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="layout" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element type="maxFilterCacheSize" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element type="maxLength" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element type="timeoutSeconds" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element type="optimizeBufferDefaultLength" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element type="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element type="filterCountMessageAppendFormat" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element type="filterCountPropertyName" minOccurs="0" maxOccurs="1" type="xs:string" />
        </xs:choice>
        <xs:attribute type="action" type="FilterResult">
          <xs:annotation>
            <xs:documentation>Action to be taken when filter matches.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="defaultFilterCacheSize" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Default number of unique filter values to expect, will automatically increase if needed</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="includeFirst" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Applies the configured action to the initial logevent that starts the timeout period. Used to configure that it should ignore all events until timeout.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Layout to be used to filter log messages.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="maxFilterCacheSize" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Max number of unique filter values to expect simultaneously</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="maxLength" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Max length of filter values, will truncate if above limit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="timeoutSeconds" type="xs:integer">
          <xs:annotation>
            <xs:documentation>How long before a filter expires, and logging is accepted again</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="optimizeBufferDefaultLength" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Default buffer size for the internal buffers</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Reuse internal buffers, and doesn't have to constantly allocate new buffers</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="filterCountMessageAppendFormat" type="xs:string">
          <xs:annotation>
            <xs:documentation>Append FilterCount to the  when an event is no longer filtered</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="filterCountPropertyName" type="xs:string">
          <xs:annotation>
            <xs:documentation>Insert FilterCount value into  when an event is no longer filtered</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType type="AccurateLocal">
    <xs:complexContent>
      <xs:extension base="TimeSource">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType type="AccurateUTC">
    <xs:complexContent>
      <xs:extension base="TimeSource">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType type="FastLocal">
    <xs:complexContent>
      <xs:extension base="TimeSource">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType type="FastUTC">
    <xs:complexContent>
      <xs:extension base="TimeSource">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:schema>